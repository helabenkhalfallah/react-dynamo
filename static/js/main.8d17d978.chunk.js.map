{"version":3,"sources":["components/DynamoWrapper.jsx","components/DynamoAppView.jsx","components/DynamoReduxView.jsx","components/DynamoGQLView.jsx","DynamoHomePage.jsx","DynamoRoutes.jsx","serviceWorker.js","index.js"],"names":["DynamoWrapper","styled","div","Paragraph","Typography","Title","Text","DynamoAppView","level","strong","name","initialValues","remember","Item","label","rules","required","message","valuePropName","Group","defaultValue","value","type","htmlType","defaultProps","TextArea","Input","DynamoReduxView","ellipsis","rows","expandable","underline","icon","PlusOutlined","size","DynamoGQLView","TabPane","Tabs","Header","Layout","Content","Footer","DynamoHomePage","style","backgroundColor","height","verticalAlign","justify","align","span","FireFilled","fontSize","gutter","defaultActiveKey","animated","tab","AppstoreAddOutlined","key","RocketOutlined","RobotOutlined","Component","Routes","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","DynamoRoutes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8d17d978.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst DynamoWrapper = styled.div`\n    margin: 0;\n    padding: 4em;\n    background: white;\n`\nexport default DynamoWrapper\n","import React from 'react'\nimport {\n  Form,\n  Input,\n  Button,\n  Radio,\n  Typography,\n  Divider,\n} from 'antd'\nimport DynamoWrapper from './DynamoWrapper'\n\nconst {\n  Paragraph,\n  Title,\n  Text,\n} = Typography\n\nconst DynamoAppView = () => (\n  <DynamoWrapper>\n    <Title level={4}>\n      Guidelines & Rules\n    </Title>\n    <Paragraph>\n      Application name is require and follow kebab-case naming convention.\n      <br />\n      <Text strong>\n        Examples : science-daily-news, notify-me, my-awesome-app, ...\n      </Text>\n      <br />\n    </Paragraph>\n    <Divider />\n    <Form\n      name=\"basic\"\n      initialValues={{ remember: true }}\n    >\n      <Form.Item\n        label=\"Application Name\"\n        name=\"appName\"\n        rules={[{\n          required: true,\n          message: 'Application name is require and follow kebab-case naming convention',\n        }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"redux\"\n        valuePropName=\"checked\"\n      >\n        <Radio.Group\n          defaultValue=\"Redux\"\n        >\n          <Radio value=\"Redux\">With redux</Radio>\n          <Radio value=\"Graphql\">With graphql</Radio>\n        </Radio.Group>\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n        >\n          Dynamo your app\n        </Button>\n      </Form.Item>\n    </Form>\n    <Divider />\n    <Paragraph>\n      Dynamo will generate\n      <Text strong> a zip </Text>\n      with an app connected to redux or graphql :\n      <Text strong>\n        <br />\n        * install required dependencies\n        <br />\n        * bootstrap app with redux or graphql\n        <br />\n        * create a test feature with architecture\n      </Text>\n    </Paragraph>\n  </DynamoWrapper>\n)\n\n// propsType (validation)\nDynamoAppView.propTypes = {\n\n}\n\n// default props\nDynamoAppView.defaultProps = {\n\n}\n\nexport default DynamoAppView\n","import React from 'react'\nimport {\n  Form,\n  Input,\n  Button,\n  Divider,\n  Typography,\n  Checkbox,\n  Radio,\n} from 'antd'\nimport {\n  PlusOutlined,\n} from '@ant-design/icons'\nimport DynamoWrapper from './DynamoWrapper'\n\nconst { TextArea } = Input\nconst {\n  Paragraph,\n  Title,\n  Text,\n} = Typography\n\nconst DynamoReduxView = () => (\n  <DynamoWrapper>\n    <Title level={4}>\n      Guidelines & Rules\n    </Title>\n    <Paragraph\n      ellipsis={{ rows: 5, expandable: true }}\n    >\n      Feature name is require and follow kebab-case naming convention.\n      <br />\n      <Text strong>\n        Examples : news, users, my-awesome-feature, ...\n      </Text>\n\n      <br />\n      Page name is require and follow UpperCamelCase naming convention and must end with Page suffix.\n      <br />\n      <Text strong>\n        Examples : TopNewsPage, UserDetailsPage, ...\n      </Text>\n\n      <br />\n      Component is a pure functionnal component and name follow UpperCamelCase naming convention.\n      <br />\n      Accepted Component suffix :\n      <br />\n      - View\n      <br />\n      - List\n      <br />\n      - Table\n      <br />\n      - TableRow\n      <br />\n      - Row\n\n      <br />\n      <Text strong>\n        Examples : TopNewsList, TopNewsRow, UserDetailsView, ...\n      </Text>\n\n      <br />\n      Service name follow UpperCamelCase naming convention and must end with Service suffix.\n      <br />\n      <Text strong>\n        Examples : TopNewsService, SubmitUserInfoService, ...\n      </Text>\n    </Paragraph>\n    <Divider />\n    <Form\n      name=\"basic\"\n      initialValues={{ remember: true }}\n    >\n      <Form.Item\n        label=\"Feature Name\"\n        name=\"featureName\"\n        rules={[{\n          required: true,\n          message: 'Feature name is require and follow kebab-case naming convention',\n        }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Page Name\"\n        name=\"pageName\"\n        rules={[{\n          required: true,\n          message: 'Page name is require and follow UpperCamelCase naming convention and must end with Page suffix',\n        }]}\n      >\n        <Input />\n      </Form.Item>\n      <Divider />\n      <Text underline>\n        Components\n      </Text>\n      <Form.Item\n        label=\"Component Name\"\n        name=\"componentName\"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Insert JSON to be converted to PropTypes\"\n        name=\"propTypes\"\n      >\n        <TextArea rows={4} />\n      </Form.Item>\n      <Form.Item\n        label=\"Component Actions\"\n        name=\"componentOutput\"\n        valuePropName=\"checked\"\n      >\n        <Radio.Group\n          defaultValue=\"onClick\"\n        >\n          <Radio value=\"onClick\">onClick</Radio>\n          <Radio value=\"onChange\">onChange</Radio>\n          <Radio value=\"onItemClick\">onItemClick</Radio>\n        </Radio.Group>\n      </Form.Item>\n      <Form.Item\n        name=\"componentLocalized\"\n        valuePropName=\"checked\"\n      >\n        <Checkbox>Localized Component</Checkbox>\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"danger\"\n          icon={<PlusOutlined />}\n          size=\"large\"\n        >\n          Add new Component\n        </Button>\n      </Form.Item>\n\n      <Divider />\n      <Text underline>\n        Services\n      </Text>\n      <Form.Item\n        label=\"Action Name\"\n        name=\"actionName\"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Service Name\"\n        name=\"serviceName\"\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Service output data name\"\n        name=\"serviceOutput\"\n      >\n        <TextArea rows={4} />\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"danger\"\n          icon={<PlusOutlined />}\n          size=\"large\"\n        >\n          Add new Service\n        </Button>\n      </Form.Item>\n\n      <Divider />\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n        >\n          Dynamo your page\n        </Button>\n      </Form.Item>\n    </Form>\n    <Divider />\n    <Paragraph\n      ellipsis={{ rows: 5, expandable: true }}\n    >\n      Dynamo will generate\n      <Text strong> a zip </Text>\n      with a page connected to redux :\n      <Text strong>\n        <br />\n        * install required dependencies\n        <br />\n        * create saga services and attach them to reducers (services folder)\n        <br />\n        * create reducers and actions (redux folder)\n        <br />\n        * create Redux Provider and Dispatcher (redux folder)\n        <br />\n        * create ReducerRoot and SagaRoot (commons folder)\n      </Text>\n      <br />\n      <Text\n        strong\n        type=\"danger\"\n      >\n        Important :\n      </Text>\n      <br />\n      * Each service has its own : reducer, action, service file.\n      <br />\n      * Dynamo will generate required files you have only to copy/update files on your generated redux app.\n    </Paragraph>\n  </DynamoWrapper>\n)\n\n// propsType (validation)\nDynamoReduxView.propTypes = {\n\n}\n\n// default props\nDynamoReduxView.defaultProps = {\n\n}\n\nexport default DynamoReduxView\n","import React from 'react'\nimport DynamoWrapper from './DynamoWrapper'\n\nconst DynamoGQLView = () => (\n  <DynamoWrapper>\n    DynamoGQLView\n  </DynamoWrapper>\n)\n\n// propsType (validation)\nDynamoGQLView.propTypes = {\n\n}\n\n// default props\nDynamoGQLView.defaultProps = {\n\n}\n\nexport default DynamoGQLView\n","import React, { Component } from 'react'\nimport {\n  Tabs,\n  Layout,\n  Row,\n  Col,\n  Typography,\n} from 'antd'\nimport {\n  AppstoreAddOutlined,\n  RocketOutlined,\n  RobotOutlined,\n  FireFilled,\n} from '@ant-design/icons'\nimport {\n  DynamoAppView,\n  DynamoReduxView,\n  DynamoGQLView,\n} from './components'\nimport 'antd/dist/antd.css'\n\nconst {\n  TabPane,\n} = Tabs\n\nconst {\n  Title,\n} = Typography\n\nconst {\n  Header,\n  Content,\n  Footer,\n} = Layout\n\nclass DynamoHomePage extends Component {\n  // propsType (validation)\n  static propTypes = {\n\n  }\n\n  // default props\n  static defaultProps = {\n\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Header\n          style={{\n            backgroundColor: 'white',\n            height: '4rem',\n            verticalAlign: 'middle',\n          }}\n        >\n          <Row\n            justify=\"start\"\n            align=\"bottom\"\n          >\n            <Col span={2}>\n              <FireFilled\n                style={{ fontSize: '2rem' }}\n              />\n            </Col>\n            <Col span={16}>\n              <Title>\n                React Dynamo\n              </Title>\n            </Col>\n          </Row>\n        </Header>\n        <Content>\n          <Row\n            justify=\"space-around\"\n            align=\"middle\"\n            gutter={[2, 2]}\n          >\n            <Col span={20}>\n              <Tabs\n                defaultActiveKey=\"1\"\n                animated={false}\n                size=\"large\"\n              >\n                <TabPane\n                  tab={(\n                    <span>\n                      <AppstoreAddOutlined />\n                      Application\n                    </span>\n                  )}\n                  key=\"1\"\n                >\n                  <DynamoAppView />\n                </TabPane>\n                <TabPane\n                  tab={(\n                    <span>\n                      <RocketOutlined />\n                      Page with Redux - Saga\n                    </span>\n                  )}\n                  key=\"2\"\n                >\n                  <DynamoReduxView />\n                </TabPane>\n                <TabPane\n                  tab={(\n                    <span>\n                      <RobotOutlined />\n                      Page with graphql (Apollo)\n                    </span>\n                  )}\n                  key=\"3\"\n                >\n                  <DynamoGQLView />\n                </TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </Content>\n        <Footer\n          style={{\n            backgroundColor: 'black',\n            height: '5rem',\n          }}\n        >\n          Footer\n        </Footer>\n      </Layout>\n    )\n  }\n}\n\nexport default DynamoHomePage\n","import React from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport DynamoHomePage from './DynamoHomePage'\n\nconst Routes = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/react-dynamo-home\" component={DynamoHomePage} />\n    </Switch>\n  </HashRouter>\n)\n\nexport default Routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport DynamoRoutes from './DynamoRoutes'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <DynamoRoutes />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}